svec+cvec
svec == cvec
svec & cvec
svec && cvec
svec[1] && cvec[1]
getwd()
getwd()
!cd ../
cd ../
cd()
getwd()
setwd("/Users/gautamsaha/Desktop/projects/r-progs/sessional1")
setwd("/Users/gautamsaha/Desktop/projects/r-progs/sessional1")
getwd()
write.table(data,file = "test.txt")
data =data.frame(test=c("this is a test"))
write.table(data,file = "test.txt")
#using scan to read from a file
data = scan("test.txt")
#using scan to read from a file
data = scan("test.txt",what="")
data
data = data.frame(data)
data
data = data.frame(data=data)
data
#using scan to read from a file
data = scan("test.txt",what="")
data
typeof(data)
data[2]
fac = function(x){
if(x<2) return 1
fac = function(x){
if(x<2) return (1)
return (x*fac(x-1))
}
fac(5)
fac = function(x){
if(x==0) return (1)
return (x*fac(x-1))
}
fac(5)
c=list(1,2,3)
v=unlist(c)
v
c=list(1,2,3,"kfhk")
v=unlist(c)
v
?collapse()
?collapse
??collapse
?paste
paste(2,"is a number: ",collapse = "|")
paste(	  collapse="|")
: "              ,
paste(2,"is a number: "              ,collapse = "|")
paste(2,"is a number: "              ,        ,"cakhbka")
paste(2,"is a number: ",        ,"cakhbka")
paste(2,"is a number: ",   " "     ,"cakhbka")
paste(2,"is a number: ",   " "     ,"cakhbka",collapse = "")
l = list(1,2,c(1,2,3))
l[3]
unlist(l[3])[3]
unlist(l)[5]
unlist(l[3])[3]
unlist(l)[5]
l = list(1,2,c(1,2,3),"dq")
unlist(l[3])[3]
unlist(l)[5]
unlist(l)[6]
#formatting
format(23.442525643563456,digits=9)
#formatting
format(23.442525643563456,digits=3)
format(c(6, 13.14521), scientific = TRUE)
format(c(6, 13.14521), scientific = TRUE,digits = 2)
format(c(6, 13.14521), scientific = TRUE,digits = 1)
format(23.47, nsmall = 5)
format(23.47, nsmall = 1)
format(6)
format(13.7, width = 6)
format("Hello", width = 8, justify = "l")
format("Hello", width = 8, justify = "c")
format("Hello", width = 8, justify = "r")
format("Hello", width = 0, justify = "r")
format("Hello", width = 10, justify = "r")
nchar("Gautam")
nchar("Gautamchandrasaha")
nchar("anukumarigupta")
nchar("anupamadhikari")
nchar("grishmaagarwal")
nchar("rishabhprasad")
nchar("rishabhprasad")
nchar("shristikumari")
nchar("ranukumarigupta")
nchar("anukumarigupta")
nchar("anupamadhikari")
nchar("anupam adhikari")
nchar("anu kumari gupta")
nchar("anupam adhikari")
nchar("gautam chandra saha")
nchar("gautam")
name="gautam"
nchar(name)
toupper(name)
tolower(name)
name
substr("this",3,4)
meanAndSd = function(v){
return (c(mean=mean(v),sd=sd(v)))
}
meanAndSd(c(1,2,3))
# Creating two lists.
Even_list <- list(2,4,6,8,10)
Odd_list <- list(1,3,5,7,9)
# Merging the two lists.
merged.list <- list(Even_list,Odd_list)
# Printing the merged list.
print(merged.list)
rv <- c(19, 21, 18)
rv2 <- c(11, 21, 46)
ra <- array(c(rv, rv2), dim = c(2, 3, 1))
print(ra)
apply_array <- apply(ra, 1, sum)
print(apply_array)
apply_array <- apply(ra, 2, sum)
print(apply_array)
apply_array <- apply(ra, 1, sum)
print(apply_array)
R <- matrix(c(5:16), nrow = 4,ncol=3)
R
R*10
emp.data<- data.frame(
employee_id = c (1:5),
employee_name = c("Shubham","Arpita","Nishka","Gunjan","Sumit"),
sal = c(623.3,915.2,611.0,729.0,843.25),
starting_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
emp.data
emp.data<- data.frame(
employee_id = c (1:5),
employee_name = c("Shubham","Arpita","Nishka","Gunjan","Sumit"),
sal = c(623.3,915.2,611.0,729.0,843.25),
starting_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = T
)
emp.data
emp.data<- data.frame(
employee_id = c (1:5),
employee_name = c("Shubham","Arpita","Nishka","Gunjan","Sumit","Sumit"),
sal = c(623.3,915.2,611.0,729.0,843.25),
starting_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = T
)
emp.data<- data.frame(
employee_id = c (1:5),
employee_name = c("Shubham","Arpita","Nishka","Gunjan","Sumit"),
sal = c(623.3,915.2,611.0,729.0,843.25),
starting_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
)
emp.data<- data.frame(
employee_id = c (1:5),
employee_name = c("Shubham","Arpita","Nishka","Gunjan","Sumit"),
sal = c(623.3,915.2,611.0,729.0,843.25),
starting_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15",
"2014-05-11", "2015-03-27"))
)
emp.data
str(emp.data)
#arrays
#syntax: array(range or values , dim = c(row,col,number of array to make))
ar = array(c(1,2,3),dim=c(3,3,1))
ar
ar=array(1:9,dim=c(3,3,2))
ar
ar=array(1:12,dim=c(3,3,1)) #this only takes element till the dimension
#like dim here is 3 X 3 so only elements 1 to 9 will be on the array
ar
v=c(1,2,3,3,4,4)
fac=factor(v)
is.factor(fac)
#it is a list of vectors of equal length
df <- data.frame(
gender = c("Male", "Male","Female"),
height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26)
)
df
x=c(5,3,2,1)
y=c(5,6,7,1)
print(x<y)
print(x>y)
print(x<=y)
print(x>y)
print(x<=y)
print(x>=y)
print(x==y)
print(y!=x)
if(F){
"
-> When there is a mismatch in length (number of elements)
of operand vectors, the elements in shorter one is recycled
in a cyclic manner to match the length of the longer one.
-> R will issue a warning if the length of the longer vector
is not an integral multiple of the shorter vector.
"
}
if(F){
"
-> Operators & and | perform element-wise operation
producing result having length of the longer operand
-> && and || examines only the first element of the operands
resulting into a single length logical vector.
-> Zero is considered FALSE and non-zero numbers are taken as TRUE.
"
}
x<-c(5,3,2,1)
y<-c(5,6,7,0)
print(!y)
print(x&y)
print(x|y)
print(x&&y)
print(x||y)
y<-c(0,6,7,0)
print(x&&y)
print(x||y)
#used to check if an element is in a vector
# %in%
v = 2:8
v1 <- 8
v2 <- 12
t <- 1:10
print(v1 %in% t)
print(v2 %in% t)
#used to multiply matrix with its transpose
#%*%
M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
M
t(M)
t = M %*% t(M)
print(t)
print(cat("this is the matrix: ",10," "))
print(paste("this is the matrix: ",10))
l = list(1:3)
l
l[4]=4
l
l = list(1,2,3)
l
l[4]=4
l
l[1]=NULL
l
c <- c(1,6,3,8,2,9)
for (i in seq_along(c)){
print(c[i])
}
x<-c("a","b","c","d")
for(i in 1:4)
{
print(x[i])
}
v <- LETTERS[1:4]
for ( i in v) {
print(i)
}
v = 1:6
for(i in seq_along(v)){
if(v[i]>3)
v[i] =v[i]*2
else
v[i] = NA
}
v
c=0
while(c<10)
{
print(c)
c=c+1
}
v <- c("Hello","repeat","loop")
cnt <- 1
repeat {
print(v)
cnt <- cnt+1
if(cnt > 5) {
break
}
}
assign("n",c(10,20,30,40,50))
print(n)
a="min"
z=switch(a,"mn"=mean(n),"mx"=max(n),"min"=min(n),"sum"=sum(n))
print(z)
#assignment
d=c()
ind=1
for(i in 1:100){
if(i%%2==0)
d[ind] = i
ind=ind+1
}
for(i in 1:100){
if(i%%2==0)
d[ind] = i
ind=ind+1
}
d
ind=ind+1
for(i in 1:100){
if(i%%2==0)
d[ind] = i
ind=ind+1
}
d
# Creating a vector as input.
data <- c("Shubham","Nishka","Arpita","Nishka","Shubham")
# Applying the factor function.
factor_data<- factor(data)
#Printing all elements of factor
print(factor_data)
#Change 2nd  element of factor with Aripta
factor_data[2] <-"Arpita"
print(factor_data)
#change 4th element of factor with "Gunjan"
factor_data[4] <- "Gunjan"    # cannot assign values outside levels
print(factor_data)
n=as.integer(readline("Enter a number: "))
n
char = as.character(readline("Enter a character: "))
char
vec = scan() #scan takes real values by default
c
d
e
vec = scan() #scan takes real values by default
vec = scan() #scan takes real values by default
vec
dvec = scan(what = double())
dvec
cvec = scan(what = character())
cvec
setwd("/Users/gautamsaha/Desktop/projects/r-progs/sessional1")
#writing to a file
data =data.frame(test=c("this is a test"))
write.table(data,file = "test.txt")
#using scan to read from a file
data = scan("test.txt",what="")
data
typeof(data)
rv <- c(19, 21, 18)
rv2 <- c(11, 21, 46)
ra <- array(c(rv, rv2), dim = c(2, 3, 1))
print(ra)
apply_array <- apply(ra, 1, sum)
print(apply_array)
ra <- array(c(rv, rv2), dim = c(2, 3, 1))
c(rv, rv2)
apply_array <- apply(ra, 1, sum)
print(apply_array)
apply_array <- apply(ra, 2, sum)
print(apply_array)
apply_array <- apply(ra, c(1,2), sum)
print(apply_array)
apply_array <- apply(ra, 2, sum)
print(apply_array)
apply_array <- apply(ra, 1, sum)
print(apply_array)
R <- matrix(c(5:16), nrow = 4,ncol=3)
R
R*10
emp.data<- data.frame(
employee_id = c (1:5),
employee_name = c("Shubham","Arpita","Nishka","Gunjan","Sumit"),
sal = c(623.3,915.2,611.0,729.0,843.25),
starting_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15",
"2014-05-11", "2015-03-27"))
)
emp.data
str(emp.data)
pow = function(x,y,z){
print(paste(x," to the power ",y," is: ",x^y," this is z: ",z))
}
pow(2,3,y=10)
typeof(c(1.5,"name"))
mul = function(){
return (list("val1",2.2))
}
mul()
p = function(a,b){
a^2
}
p(10)
if(F){
a="Hello"
b="How"
c="are you?"
paste(a,b,c)
paste(a,b,c,sep="-")
paste(a,b,c,sep="    ")
paste(a,b,c,collapse = "")
format(23.12345678,digits=9)
format(c(6.13423525),scientific=T)
format(2.18,digits=5)
format(c(13,7),width=6)
nchar("GautamChandraSaha")
rp = "RishabhPrasad"
toupper(rp)
substring("Gautam",5,7)
meanAndsd = function(vec){
me = mean(vec)
sdev = sd(vec)
c(me,sdev)
}
meanAndsd(c(1,1,3))
a<-c("Shubham","Arpita","Nishka","Vaishali","Sumit","Gunjan")
b<-c(TRUE,FALSE,TRUE,TRUE,FALSE,FALSE)
a[b]
a[-4]
a[20]
a[c(2,3,3,4)]
a[2:4]
z=c("TensorFlow","PyTorch")
names(z)=c("Start","End")
z[c("End","Start")]
vec1 <-c(1,3,5)
vec2 <-c(10,11,12,13,14,15)
res <- array(c(vec1,vec2),dim=c(3,3,2))
print(res)
col_names <- c("Col1","Col2","Col3")
row_names <- c("Row1","Row2","Row3")
matrix_names <- c("Matrix1","Matrix2")
res <- array(c(vec1,vec2),dim=c(3,3,2),dimnames=list(row_names,col_names,matrix_names))
print(res)
A <- array(1: 24, dim = c(3, 4, 2))
print(A)
#SYNTAX: Array_Name[row_position, Column_Position, Matrix_Level].
# Access the element of 1st row and 2nd column in Matrix 1.
print(A[1, 2, 1])
# Access the element of 3rd row and 4th column in in Matrix 2.
print(A[3, 4, 2])
print(A[3, , 2])
print(A[, 2, 1])
#SYNTAX: apply(X, MARGIN, FUN)
rv <- c(19, 21, 18)
rv2 <- c(11, 21, 46)
ra <- array(c(rv, rv2), dim = c(2, 3, 1))
print(ra)
apply_array <- apply(ra, 1, sum)
print(apply_array)
#Arranging elements sequentially by row.
P <- matrix(c(5:16), nrow = 4, byrow = TRUE)
print(P)
# Arranging elements sequentially by column.
Q <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(Q)
emp.data<- data.frame(
employee_id = c (1:5),
employee_name = c("Shubham","Arpita","Nishka","Gunjan","Sumit"),
sal = c(623.3,915.2,611.0,729.0,843.25),
starting_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
final <- emp.data[1,]
print(final)
final <- emp.data[1]
print(final)
final <- data.frame(emp.data$employee_id,emp.data$sal)
print(final)
final <- emp.data[c('employee_id','sal')]
print(final)
final <- emp.data[c(2,4),]
final
}
fac = function(x){
if(x==0) return (1)
return (x*fac(x-1))
}
fac(5)
#formatting
format(23.442525643563456,digits=3)
format(c(6, 13.14521), scientific = TRUE,digits = 1)
format(23.47, nsmall = 1)
format(6)
format(13.7, width = 6)
format("Hello", width = 10, justify = "r")
name="gautam"
nchar(name)
toupper(name)
tolower(name)
name
substr("this",3,4)
meanAndSd = function(v){
return (c(mean=mean(v),sd=sd(v)))
}
meanAndSd(c(1,2,3))
# Creating two lists.
Even_list <- list(2,4,6,8,10)
Odd_list <- list(1,3,5,7,9)
# Merging the two lists.
merged.list <- list(Even_list,Odd_list)
# Printing the merged list.
print(merged.list)
format(23.47, nsmall = 1)
format(23.47, nsmall = 3)
format(23.47, nsmall = 0)
format(23.47, nsmall = -1)
format(23.47, nsmall = 1)
substr("this",3,4)
